<?xml version="1.0" encoding="UTF-8"?>
<project name="regolith" default="conjunction" basedir=".">

    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="release" value="release"/>
    <property name="lib" location="${basedir}/lib"/>
    <property name="release.lib" location="${release}/lib"/>
    <property name="report.dir" location="${basedir}/reports"/>

    <property name="deploy" value="deploy"/>
    <property name="login.name" value=""/>

    <property name="gg" value="../awt"/>
    <property name="gg.console.dir" location="${gg}/console/"/>
    <property name="gg.common.dir" location="${gg}/common"/>
    <property name="gg.awt.console.dir" location="${gg}/awt"/>
    <property name="gg.modules.dir" location="${build}/gg.modules"/>
    <property name="client.dir" location="client"/>
    <property name="common.dir" location="common"/>

    <property name="conjunction.dir" value="conjunction"/>
    <property name="server.dir" value="server"/>
    <property name="server.main.dir" value="server.main"/>
    <property name="server.battle.dir" value="server.battle"/>

    <property name="gg.common.lib" value="ggcommon.jar"/>
    <property name="gg.console.lib" value="ggconsole.jar"/>
    <property name="gg.awt.console.lib" value="ggawtconsole.jar"/>
    <property name="common.lib" value="common.jar"/>
    <property name="client.lib" value="client.jar"/>
    <property name="main.server.lib" value="mainserver.jar"/>
    <property name="battle.server.lib" value="battleserver.jar"/>
    <property name="conjunction.lib" value="conjunction.jar"/>
    <property name="server.lib" value="server.jar"/>

    <target name="clean">
        <delete dir="${build}"/>
        <mkdir dir="${build}"/>
        <delete dir="${release}"/>
        <mkdir dir="${release}"/>
        <echo message="Cleaning has been finished."/>
    </target>

    <target name="gg.console" depends="gg.common">
        <echo message="Deploying gg.console"/>

        <delete dir="${gg.modules.dir}/gg.console"/>
        <mkdir dir="${gg.modules.dir}/gg.console"/>

        <path id="classpath.gg.console">
            <fileset dir="${gg.console.dir}/lib">
                <patternset>
                    <include name="**/*"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                </patternset>
            </fileset>
        </path>

        <javac srcdir="${gg.console.dir}/" destdir="${gg.modules.dir}/gg.console" includeantruntime="false"
               debug="true" encoding="UTF-8">
            <classpath refid="classpath.gg.console"/>
        </javac>

        <jar basedir="${gg.modules.dir}/gg.console" destfile="${release}/${gg.console.lib}"/>
    </target>

    <target name="gg.common">
        <echo message="Deploying gg.common"/>

        <delete dir="${gg.modules.dir}/gg.common"/>
        <mkdir dir="${gg.modules.dir}/gg.common"/>

        <javac srcdir="${gg.common.dir}/" destdir="${gg.modules.dir}/gg.common" includeantruntime="false" debug="true"
               encoding="UTF-8"/>

        <jar basedir="${gg.modules.dir}/gg.common" destfile="${release}/${gg.common.lib}"/>
    </target>

    <target name="gg.awt.console" depends="gg.common">
        <echo message="Deploying gg.awt.console"/>

        <delete dir="${gg.modules.dir}/gg.awt.console"/>
        <mkdir dir="${gg.modules.dir}/gg.awt.console"/>

        <path id="classpath.gg.awt.console">
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                </patternset>
            </fileset>
        </path>

        <javac srcdir="${gg.awt.console.dir}/" destdir="${gg.modules.dir}/gg.awt.console" includeantruntime="false"
               debug="true" encoding="UTF-8">
            <classpath refid="classpath.gg.awt.console"/>
        </javac>

        <jar basedir="${gg.modules.dir}/gg.awt.console" destfile="${release}/${gg.awt.console.lib}"/>
    </target>

    <target name="common" depends="gg.common">

        <delete dir="${build}/common"/>
        <mkdir dir="${build}/common"/>

        <path id="classpath.common">
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                </patternset>
            </fileset>
        </path>

        <javac srcdir="${common.dir}/src" destdir="${build}/common" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.common"/>
        </javac>
        <javac srcdir="${common.dir}/testsrc" destdir="${build}/common" includeantruntime="false" debug="true">
            <classpath refid="classpath.common"/>
        </javac>
        <jar basedir="${build}/common" destfile="${release}/${common.lib}"/>
        <copy todir="${release.lib}">
            <fileset dir="${lib}">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="client" depends="common,gg.awt.console,gg.console">

        <delete dir="${build}/client"/>
        <mkdir dir="${build}/client"/>

        <path id="classpath.client">
            <fileset dir="${gg.console.dir}/lib">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                    <include name="${gg.awt.console.lib}"/>
                    <include name="${gg.console.lib}"/>
                </patternset>
            </fileset>
        </path>

        <echo message="Compiling client src..."/>

        <javac srcdir="${client.dir}/src" destdir="${build}/client" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.client"/>
        </javac>

        <echo message="Compiling client testsrc..."/>

        <javac srcdir="${client.dir}/testsrc" destdir="${build}/client" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.client"/>
        </javac>

        <echo message="Copying libs"/>

        <echo message="Packing Regolith client"/>

        <jar basedir="${build}/client" destfile="${release}/${client.lib}">
            <manifest>
                <attribute name="Main-Class" value="client.RegolithMain"/>
                <attribute name="Class-Path" value="
					lib/junit-4.9.jar
					${gg.common.lib}
					${gg.console.lib}
					${gg.awt.console.lib}"
                        />
            </manifest>
        </jar>

    </target>

    <target name="server" depends="common, gg.common">
        <delete dir="${build}/server"/>
        <mkdir dir="${build}/server"/>

        <path id="classpath.server">
            <fileset dir="${lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${lib}/server">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                </patternset>
            </fileset>
        </path>

        <javac srcdir="${server.dir}/src" destdir="${build}/server" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.server"/>
        </javac>
        <javac srcdir="${server.dir}/testsrc" destdir="${build}/server" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.server"/>
        </javac>

        <copy todir="${build}/server">
            <fileset dir="${common.dir}/src">
                <patternset>
                    <include name="**/*.xml"/>
                </patternset>
            </fileset>
        </copy>
        <copy todir="${build}/server">
            <fileset dir="${server.dir}/src">
                <patternset>
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                </patternset>
            </fileset>
        </copy>

        <jar basedir="${build}/server" destfile="${release}/${server.lib}"/>
    </target>

    <target name="server.main" depends="common,server">
        <delete dir="${build}/server.main"/>
        <mkdir dir="${build}/server.main"/>

        <path id="classpath.server.main">
            <fileset dir="${lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${lib}/server">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                    <include name="${server.lib}"/>
                </patternset>
            </fileset>
        </path>

        <javac srcdir="${server.main.dir}/src" destdir="${build}/server.main" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.server.main"/>
        </javac>
        <javac srcdir="${server.main.dir}/testsrc" destdir="${build}/server.main" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.server.main"/>
        </javac>
        <copy todir="${build}/server.main">
            <fileset dir="${server.main.dir}/src">
                <patternset>
                    <exclude name="**/*.java"/>
                </patternset>
            </fileset>
        </copy>

        <jar basedir="${build}/server.main" destfile="${release}/${main.server.lib}"/>
    </target>

    <target name="server.battle" depends="common,server">
        <delete dir="${build}/server.battle"/>
        <mkdir dir="${build}/server.battle"/>

        <path id="classpath.server.battle">
            <fileset dir="${lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${lib}/server">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                    <include name="${server.lib}"/>
                </patternset>
            </fileset>
        </path>

        <javac srcdir="${server.battle.dir}/src" destdir="${build}/server.battle" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.server.battle"/>
        </javac>

        <copy todir="${build}/server.battle">
            <fileset dir="${server.battle.dir}/src">
                <patternset>
                    <exclude name="**/*.java"/>
                </patternset>
            </fileset>
        </copy>

        <jar basedir="${build}/server.battle" destfile="${release}/${battle.server.lib}"/>
    </target>

    <!--
    Таска создаёт библиотеку необходимую для тестирования клиент-серверного приложения на одной машине.
    -->
    <target name="conjunction" depends="clean,client,server.main,server.battle">
        <delete dir="${build}/conjunction"/>
        <mkdir dir="${build}/conjunction"/>

        <path id="classpath.conjunction">
            <fileset dir="${lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${lib}/server">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                    <include name="${server.lib}"/>
                    <include name="${main.server.lib}"/>
                    <include name="${gg.awt.console.lib}"/>
                    <include name="${gg.console.lib}"/>
                    <include name="${client.lib}"/>
                </patternset>
            </fileset>
        </path>

        <javac srcdir="${conjunction.dir}/testsrc" destdir="${build}/conjunction" includeantruntime="false" debug="true"
               encoding="UTF-8">
            <classpath refid="classpath.conjunction"/>
        </javac>

        <jar basedir="${build}/conjunction" destfile="${release}/conjunction.jar"/>
    </target>

    <!--
    Запускаем эту таску чтоб почистить БД от мусора(проставить туда данные по-умолчанию).
    -->
    <target name="db.init">
        <path id="classpath.conjunction">
            <fileset dir="${release.lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release.lib}/server">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                    <include name="${server.lib}"/>
                    <include name="${main.server.lib}"/>
                </patternset>
            </fileset>
        </path>

        <delete dir="${report.dir}"/>
        <mkdir dir="${report.dir}"/>

        <junit printsummary="yes" haltonfailure="yes" fork="true" spawn="false">
            <classpath refid="classpath.conjunction"/>
            <formatter type="plain" usefile="false"/>
            <test name="com.geargames.regolith.ServerDBTest" haltonfailure="no" outfile="${report.dir}/result"/>
        </junit>
    </target>

    <!--
        Запускаем эту такску если хотим проверить как работает приложение.
        0.запускает сервер
        1.ждёт 30 секунд
        2.запускает клиента (он берёт с сервера конфигурацию и рисует что есть)
    -->
    <target name="run.main.server">
        <path id="classpath.run.main.server">
            <fileset dir="${release.lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release.lib}/server">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                    <include name="${server.lib}"/>
                    <include name="${main.server.lib}"/>
                </patternset>
            </fileset>
        </path>
        <java classname="com.geargames.regolith.RunMainService" fork="true" spawn="false">
            <classpath refid="classpath.run.main.server"/>
        </java>
    </target>

    <target name="run.battle.server">
        <path id="classpath.run.battle.server">
            <fileset dir="${release.lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release.lib}/server">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                    <include name="${server.lib}"/>
                    <include name="${battle.server.lib}"/>
                </patternset>
            </fileset>
        </path>
        <java classname="com.geargames.regolith.service.BattleConsoleServiceManager" fork="true" spawn="false">
            <classpath refid="classpath.run.battle.server"/>
            <arg line="START BATTLE 127.0.0.1 127.0.0.1 2754"/>
        </java>

    </target>

    <target name="run.client">
        <path id="classpath.test">
            <fileset dir="${release.lib}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
            <fileset dir="${release}">
                <patternset>
                    <include name="${gg.common.lib}"/>
                    <include name="${common.lib}"/>
                    <include name="${gg.awt.console.lib}"/>
                    <include name="${gg.console.lib}"/>
                    <include name="${client.lib}"/>
                </patternset>
            </fileset>
        </path>
        <java classname="com.geargames.regolith.MenuTest" fork="true" spawn="false">
            <classpath refid="classpath.test"/>
            <arg value="${login.name}"/>
        </java>
    </target>
	   
	<target name="run.rmiregistry">
    	 <echo message="Starting rmiregestry"/>
			<exec dir="basedir" executable="sh">
				<arg line="startRmiRegistry"/>
			</exec>
        <echo message="rmiregistry was started"/>
	</target>
	

	
	
	<target name="run.all">
		<antcall target="run.rmiregistry">
		</antcall>
		<sleep seconds="5"/>
		
		<antcall target="main.server">
		</antcall>
		<sleep seconds="5"/>
		
		<antcall target="run.battle.server">
		</antcall>
		<antcall target="run.client">
			<param name="login.name" value="1"/>
		</antcall>		
		<antcall target="run.client">
			<param name="login.name" value="2"/>
		</antcall>
	</target>
	
</project>
